// Code generated by "go-option -type Number"; DO NOT EDIT.
// Install go-option by "go get install github.com/searKing/golang/tools/go-option"

package generic

import "context"

// A NumberOption sets options.
type NumberOption[T context.Context] interface {
	apply(*Number[T])
}

// EmptyNumberOption does not alter the configuration. It can be embedded
// in another structure to build custom options.
//
// This API is EXPERIMENTAL.
type EmptyNumberOption[T context.Context] struct{}

func (EmptyNumberOption[T]) apply(*Number[T]) {}

// NumberOptionFunc wraps a function that modifies Number[T] into an
// implementation of the NumberOption[T context.Context] interface.
type NumberOptionFunc[T context.Context] func(*Number[T])

func (f NumberOptionFunc[T]) apply(do *Number[T]) {
	f(do)
}

// ApplyOptions call apply() for all options one by one
func (o *Number[T]) ApplyOptions(options ...NumberOption[T]) *Number[T] {
	for _, opt := range options {
		if opt == nil {
			continue
		}
		opt.apply(o)
	}
	return o
}

// WithNumber sets Number.
func WithNumber[T context.Context](v Number[T]) NumberOption[T] {
	return NumberOptionFunc[T](func(o *Number[T]) {
		*o = v
	})
}

// WithNumberGenericType appends GenericType in Number[T].
func WithNumberGenericType[T context.Context](v ...T) NumberOption[T] {
	return NumberOptionFunc[T](func(o *Number[T]) {
		o.GenericType = append(o.GenericType, v...)
	})
}

// WithNumberGenericTypeReplace sets GenericType in Number[T].
func WithNumberGenericTypeReplace[T context.Context](v ...T) NumberOption[T] {
	return NumberOptionFunc[T](func(o *Number[T]) {
		o.GenericType = v
	})
}
